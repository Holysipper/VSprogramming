
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003234  08003234  00013234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003264  08003264  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003264  08003264  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003264  08003264  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003264  08003264  00013264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003268  08003268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800326c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000040c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000418  20000418  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012384  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ae  00000000  00000000  000323c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  00034770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f70  00000000  00000000  000357e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dad5  00000000  00000000  00036758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b6b  00000000  00000000  0005422d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4cf6  00000000  00000000  00067d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011ca8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046a8  00000000  00000000  0011cae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800321c 	.word	0x0800321c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800321c 	.word	0x0800321c

080001c8 <stepperDelay>:
void stepperfunc(int pos);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void stepperDelay(uint8_t time){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	uint8_t timer_value = __HAL_TIM_GET_COUNTER(&htim1);
 80001d2:	4b10      	ldr	r3, [pc, #64]	; (8000214 <stepperDelay+0x4c>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001d8:	73fb      	strb	r3, [r7, #15]
	if (timer_value >= time/256){
 80001da:	7bfa      	ldrb	r2, [r7, #15]
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	da00      	bge.n	80001e4 <stepperDelay+0x1c>
 80001e2:	33ff      	adds	r3, #255	; 0xff
 80001e4:	121b      	asrs	r3, r3, #8
 80001e6:	429a      	cmp	r2, r3
 80001e8:	db10      	blt.n	800020c <stepperDelay+0x44>
		stepperfunc(pos);
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <stepperDelay+0x50>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f814 	bl	800021c <stepperfunc>
		pos++;
 80001f4:	4b08      	ldr	r3, [pc, #32]	; (8000218 <stepperDelay+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	3301      	adds	r3, #1
 80001fa:	4a07      	ldr	r2, [pc, #28]	; (8000218 <stepperDelay+0x50>)
 80001fc:	6013      	str	r3, [r2, #0]
		if (pos == 7){
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <stepperDelay+0x50>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b07      	cmp	r3, #7
 8000204:	d102      	bne.n	800020c <stepperDelay+0x44>
			pos = 0;
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <stepperDelay+0x50>)
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800020c:	bf00      	nop
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000078 	.word	0x20000078
 8000218:	20000028 	.word	0x20000028

0800021c <stepperfunc>:
void stepperfunc(int pos){
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	  for (int i=0;i<8;i++){
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	e0e4      	b.n	80003f4 <stepperfunc+0x1d8>
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	2b07      	cmp	r3, #7
 800022e:	f200 80db 	bhi.w	80003e8 <stepperfunc+0x1cc>
 8000232:	a201      	add	r2, pc, #4	; (adr r2, 8000238 <stepperfunc+0x1c>)
 8000234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000238:	08000259 	.word	0x08000259
 800023c:	0800028b 	.word	0x0800028b
 8000240:	080002bd 	.word	0x080002bd
 8000244:	080002ef 	.word	0x080002ef
 8000248:	08000321 	.word	0x08000321
 800024c:	08000353 	.word	0x08000353
 8000250:	08000385 	.word	0x08000385
 8000254:	080003b7 	.word	0x080003b7
			  switch (i){
			  	  case 0:
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000258:	2201      	movs	r2, #1
 800025a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025e:	486a      	ldr	r0, [pc, #424]	; (8000408 <stepperfunc+0x1ec>)
 8000260:	f000 ff44 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800026a:	4867      	ldr	r0, [pc, #412]	; (8000408 <stepperfunc+0x1ec>)
 800026c:	f000 ff3e 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000276:	4864      	ldr	r0, [pc, #400]	; (8000408 <stepperfunc+0x1ec>)
 8000278:	f000 ff38 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000282:	4861      	ldr	r0, [pc, #388]	; (8000408 <stepperfunc+0x1ec>)
 8000284:	f000 ff32 	bl	80010ec <HAL_GPIO_WritePin>
					break;
 8000288:	e0ae      	b.n	80003e8 <stepperfunc+0x1cc>

			  	  case 1:
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800028a:	2201      	movs	r2, #1
 800028c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000290:	485d      	ldr	r0, [pc, #372]	; (8000408 <stepperfunc+0x1ec>)
 8000292:	f000 ff2b 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800029c:	485a      	ldr	r0, [pc, #360]	; (8000408 <stepperfunc+0x1ec>)
 800029e:	f000 ff25 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002a8:	4857      	ldr	r0, [pc, #348]	; (8000408 <stepperfunc+0x1ec>)
 80002aa:	f000 ff1f 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80002ae:	2200      	movs	r2, #0
 80002b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b4:	4854      	ldr	r0, [pc, #336]	; (8000408 <stepperfunc+0x1ec>)
 80002b6:	f000 ff19 	bl	80010ec <HAL_GPIO_WritePin>
					break;
 80002ba:	e095      	b.n	80003e8 <stepperfunc+0x1cc>

			  	  case 2:
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c2:	4851      	ldr	r0, [pc, #324]	; (8000408 <stepperfunc+0x1ec>)
 80002c4:	f000 ff12 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002ce:	484e      	ldr	r0, [pc, #312]	; (8000408 <stepperfunc+0x1ec>)
 80002d0:	f000 ff0c 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002da:	484b      	ldr	r0, [pc, #300]	; (8000408 <stepperfunc+0x1ec>)
 80002dc:	f000 ff06 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002e6:	4848      	ldr	r0, [pc, #288]	; (8000408 <stepperfunc+0x1ec>)
 80002e8:	f000 ff00 	bl	80010ec <HAL_GPIO_WritePin>
					break;
 80002ec:	e07c      	b.n	80003e8 <stepperfunc+0x1cc>

			  	  case 3:
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f4:	4844      	ldr	r0, [pc, #272]	; (8000408 <stepperfunc+0x1ec>)
 80002f6:	f000 fef9 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80002fa:	2201      	movs	r2, #1
 80002fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000300:	4841      	ldr	r0, [pc, #260]	; (8000408 <stepperfunc+0x1ec>)
 8000302:	f000 fef3 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000306:	2201      	movs	r2, #1
 8000308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800030c:	483e      	ldr	r0, [pc, #248]	; (8000408 <stepperfunc+0x1ec>)
 800030e:	f000 feed 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000318:	483b      	ldr	r0, [pc, #236]	; (8000408 <stepperfunc+0x1ec>)
 800031a:	f000 fee7 	bl	80010ec <HAL_GPIO_WritePin>
					break;
 800031e:	e063      	b.n	80003e8 <stepperfunc+0x1cc>

			  	  case 4:
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000326:	4838      	ldr	r0, [pc, #224]	; (8000408 <stepperfunc+0x1ec>)
 8000328:	f000 fee0 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000332:	4835      	ldr	r0, [pc, #212]	; (8000408 <stepperfunc+0x1ec>)
 8000334:	f000 feda 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800033e:	4832      	ldr	r0, [pc, #200]	; (8000408 <stepperfunc+0x1ec>)
 8000340:	f000 fed4 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800034a:	482f      	ldr	r0, [pc, #188]	; (8000408 <stepperfunc+0x1ec>)
 800034c:	f000 fece 	bl	80010ec <HAL_GPIO_WritePin>
					break;
 8000350:	e04a      	b.n	80003e8 <stepperfunc+0x1cc>

			  	  case 5:
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000358:	482b      	ldr	r0, [pc, #172]	; (8000408 <stepperfunc+0x1ec>)
 800035a:	f000 fec7 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000364:	4828      	ldr	r0, [pc, #160]	; (8000408 <stepperfunc+0x1ec>)
 8000366:	f000 fec1 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000370:	4825      	ldr	r0, [pc, #148]	; (8000408 <stepperfunc+0x1ec>)
 8000372:	f000 febb 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000376:	2201      	movs	r2, #1
 8000378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800037c:	4822      	ldr	r0, [pc, #136]	; (8000408 <stepperfunc+0x1ec>)
 800037e:	f000 feb5 	bl	80010ec <HAL_GPIO_WritePin>
					break;
 8000382:	e031      	b.n	80003e8 <stepperfunc+0x1cc>

			  	  case 6:
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800038a:	481f      	ldr	r0, [pc, #124]	; (8000408 <stepperfunc+0x1ec>)
 800038c:	f000 feae 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000396:	481c      	ldr	r0, [pc, #112]	; (8000408 <stepperfunc+0x1ec>)
 8000398:	f000 fea8 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003a2:	4819      	ldr	r0, [pc, #100]	; (8000408 <stepperfunc+0x1ec>)
 80003a4:	f000 fea2 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ae:	4816      	ldr	r0, [pc, #88]	; (8000408 <stepperfunc+0x1ec>)
 80003b0:	f000 fe9c 	bl	80010ec <HAL_GPIO_WritePin>
					break;
 80003b4:	e018      	b.n	80003e8 <stepperfunc+0x1cc>

			  	  case 7:
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003bc:	4812      	ldr	r0, [pc, #72]	; (8000408 <stepperfunc+0x1ec>)
 80003be:	f000 fe95 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c8:	480f      	ldr	r0, [pc, #60]	; (8000408 <stepperfunc+0x1ec>)
 80003ca:	f000 fe8f 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <stepperfunc+0x1ec>)
 80003d6:	f000 fe89 	bl	80010ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003e0:	4809      	ldr	r0, [pc, #36]	; (8000408 <stepperfunc+0x1ec>)
 80003e2:	f000 fe83 	bl	80010ec <HAL_GPIO_WritePin>
					break;
 80003e6:	bf00      	nop

			  };
			  HAL_Delay(5);
 80003e8:	2005      	movs	r0, #5
 80003ea:	f000 fbfb 	bl	8000be4 <HAL_Delay>
	  for (int i=0;i<8;i++){
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	3301      	adds	r3, #1
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	2b07      	cmp	r3, #7
 80003f8:	f77f af17 	ble.w	800022a <stepperfunc+0xe>
			};
}
 80003fc:	bf00      	nop
 80003fe:	bf00      	nop
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	48000c00 	.word	0x48000c00

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000410:	f000 fb82 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000414:	f000 f80e 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000418:	f000 f962 	bl	80006e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800041c:	f000 f86c 	bl	80004f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000420:	f000 f8aa 	bl	8000578 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000424:	f000 f93a 	bl	800069c <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000428:	f000 f8e4 	bl	80005f4 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  stepperDelay(255);
 800042c:	20ff      	movs	r0, #255	; 0xff
 800042e:	f7ff fecb 	bl	80001c8 <stepperDelay>
 8000432:	e7fb      	b.n	800042c <main+0x20>

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b09e      	sub	sp, #120	; 0x78
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800043e:	2228      	movs	r2, #40	; 0x28
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f002 fee2 	bl	800320c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000448:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000458:	463b      	mov	r3, r7
 800045a:	223c      	movs	r2, #60	; 0x3c
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f002 fed4 	bl	800320c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000464:	2303      	movs	r3, #3
 8000466:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000472:	2301      	movs	r3, #1
 8000474:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000476:	2310      	movs	r3, #16
 8000478:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047a:	2302      	movs	r3, #2
 800047c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000482:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000484:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000488:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800048e:	4618      	mov	r0, r3
 8000490:	f001 f848 	bl	8001524 <HAL_RCC_OscConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800049a:	f000 f9c3 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049e:	230f      	movs	r3, #15
 80004a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a2:	2302      	movs	r3, #2
 80004a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004b8:	2102      	movs	r1, #2
 80004ba:	4618      	mov	r0, r3
 80004bc:	f001 ff3a 	bl	8002334 <HAL_RCC_ClockConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004c6:	f000 f9ad 	bl	8000824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <SystemClock_Config+0xc0>)
 80004cc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004d2:	2300      	movs	r3, #0
 80004d4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004da:	463b      	mov	r3, r7
 80004dc:	4618      	mov	r0, r3
 80004de:	f002 f90f 	bl	8002700 <HAL_RCCEx_PeriphCLKConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80004e8:	f000 f99c 	bl	8000824 <Error_Handler>
  }
}
 80004ec:	bf00      	nop
 80004ee:	3778      	adds	r7, #120	; 0x78
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	00021020 	.word	0x00021020

080004f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_I2C1_Init+0x74>)
 80004fe:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <MX_I2C1_Init+0x78>)
 8000500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_I2C1_Init+0x74>)
 8000504:	4a1b      	ldr	r2, [pc, #108]	; (8000574 <MX_I2C1_Init+0x7c>)
 8000506:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_I2C1_Init+0x74>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <MX_I2C1_Init+0x74>)
 8000510:	2201      	movs	r2, #1
 8000512:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_I2C1_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_I2C1_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_I2C1_Init+0x74>)
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_I2C1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_I2C1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000532:	480e      	ldr	r0, [pc, #56]	; (800056c <MX_I2C1_Init+0x74>)
 8000534:	f000 fdf2 	bl	800111c <HAL_I2C_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800053e:	f000 f971 	bl	8000824 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000542:	2100      	movs	r1, #0
 8000544:	4809      	ldr	r0, [pc, #36]	; (800056c <MX_I2C1_Init+0x74>)
 8000546:	f000 fe78 	bl	800123a <HAL_I2CEx_ConfigAnalogFilter>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000550:	f000 f968 	bl	8000824 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000554:	2100      	movs	r1, #0
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_I2C1_Init+0x74>)
 8000558:	f000 feba 	bl	80012d0 <HAL_I2CEx_ConfigDigitalFilter>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000562:	f000 f95f 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	2000002c 	.word	0x2000002c
 8000570:	40005400 	.word	0x40005400
 8000574:	2000090e 	.word	0x2000090e

08000578 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <MX_SPI1_Init+0x74>)
 800057e:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <MX_SPI1_Init+0x78>)
 8000580:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <MX_SPI1_Init+0x74>)
 8000584:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000588:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <MX_SPI1_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <MX_SPI1_Init+0x74>)
 8000592:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000596:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_SPI1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <MX_SPI1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_SPI1_Init+0x74>)
 80005a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_SPI1_Init+0x74>)
 80005ae:	2208      	movs	r2, #8
 80005b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_SPI1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_SPI1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <MX_SPI1_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_SPI1_Init+0x74>)
 80005c6:	2207      	movs	r2, #7
 80005c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <MX_SPI1_Init+0x74>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_SPI1_Init+0x74>)
 80005d2:	2208      	movs	r2, #8
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_SPI1_Init+0x74>)
 80005d8:	f002 fa42 	bl	8002a60 <HAL_SPI_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005e2:	f000 f91f 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000c4 	.word	0x200000c4
 80005f0:	40013000 	.word	0x40013000

080005f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <MX_TIM1_Init+0xa0>)
 8000614:	4a20      	ldr	r2, [pc, #128]	; (8000698 <MX_TIM1_Init+0xa4>)
 8000616:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200;
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_TIM1_Init+0xa0>)
 800061a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800061e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_TIM1_Init+0xa0>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_TIM1_Init+0xa0>)
 8000628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800062c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_TIM1_Init+0xa0>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_TIM1_Init+0xa0>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_TIM1_Init+0xa0>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000640:	4814      	ldr	r0, [pc, #80]	; (8000694 <MX_TIM1_Init+0xa0>)
 8000642:	f002 fab8 	bl	8002bb6 <HAL_TIM_Base_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800064c:	f000 f8ea 	bl	8000824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	4619      	mov	r1, r3
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_TIM1_Init+0xa0>)
 800065e:	f002 fb01 	bl	8002c64 <HAL_TIM_ConfigClockSource>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000668:	f000 f8dc 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_TIM1_Init+0xa0>)
 800067e:	f002 fce5 	bl	800304c <HAL_TIMEx_MasterConfigSynchronization>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000688:	f000 f8cc 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000078 	.word	0x20000078
 8000698:	40012c00 	.word	0x40012c00

0800069c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <MX_USB_PCD_Init+0x40>)
 80006a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006a8:	2208      	movs	r2, #8
 80006aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006ae:	2202      	movs	r2, #2
 80006b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006b4:	2202      	movs	r2, #2
 80006b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006c6:	f000 fe4f 	bl	8001368 <HAL_PCD_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80006d0:	f000 f8a8 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000128 	.word	0x20000128
 80006dc:	40005c00 	.word	0x40005c00

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	; 0x30
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f6:	4b48      	ldr	r3, [pc, #288]	; (8000818 <MX_GPIO_Init+0x138>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a47      	ldr	r2, [pc, #284]	; (8000818 <MX_GPIO_Init+0x138>)
 80006fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000700:	6153      	str	r3, [r2, #20]
 8000702:	4b45      	ldr	r3, [pc, #276]	; (8000818 <MX_GPIO_Init+0x138>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b42      	ldr	r3, [pc, #264]	; (8000818 <MX_GPIO_Init+0x138>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a41      	ldr	r2, [pc, #260]	; (8000818 <MX_GPIO_Init+0x138>)
 8000714:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000718:	6153      	str	r3, [r2, #20]
 800071a:	4b3f      	ldr	r3, [pc, #252]	; (8000818 <MX_GPIO_Init+0x138>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000726:	4b3c      	ldr	r3, [pc, #240]	; (8000818 <MX_GPIO_Init+0x138>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a3b      	ldr	r2, [pc, #236]	; (8000818 <MX_GPIO_Init+0x138>)
 800072c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b39      	ldr	r3, [pc, #228]	; (8000818 <MX_GPIO_Init+0x138>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b36      	ldr	r3, [pc, #216]	; (8000818 <MX_GPIO_Init+0x138>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a35      	ldr	r2, [pc, #212]	; (8000818 <MX_GPIO_Init+0x138>)
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	6153      	str	r3, [r2, #20]
 800074a:	4b33      	ldr	r3, [pc, #204]	; (8000818 <MX_GPIO_Init+0x138>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	4b30      	ldr	r3, [pc, #192]	; (8000818 <MX_GPIO_Init+0x138>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a2f      	ldr	r2, [pc, #188]	; (8000818 <MX_GPIO_Init+0x138>)
 800075c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <MX_GPIO_Init+0x138>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <MX_GPIO_Init+0x138>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a29      	ldr	r2, [pc, #164]	; (8000818 <MX_GPIO_Init+0x138>)
 8000774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000778:	6153      	str	r3, [r2, #20]
 800077a:	4b27      	ldr	r3, [pc, #156]	; (8000818 <MX_GPIO_Init+0x138>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000786:	2200      	movs	r2, #0
 8000788:	f64f 7108 	movw	r1, #65288	; 0xff08
 800078c:	4823      	ldr	r0, [pc, #140]	; (800081c <MX_GPIO_Init+0x13c>)
 800078e:	f000 fcad 	bl	80010ec <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 414c 	mov.w	r1, #52224	; 0xcc00
 8000798:	4821      	ldr	r0, [pc, #132]	; (8000820 <MX_GPIO_Init+0x140>)
 800079a:	f000 fca7 	bl	80010ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800079e:	2337      	movs	r3, #55	; 0x37
 80007a0:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007a2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	481a      	ldr	r0, [pc, #104]	; (800081c <MX_GPIO_Init+0x13c>)
 80007b4:	f000 fb20 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007b8:	f64f 7308 	movw	r3, #65288	; 0xff08
 80007bc:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4812      	ldr	r0, [pc, #72]	; (800081c <MX_GPIO_Init+0x13c>)
 80007d2:	f000 fb11 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ec:	f000 fb04 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
 80007f0:	f44f 434c 	mov.w	r3, #52224	; 0xcc00
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_GPIO_Init+0x140>)
 800080a:	f000 faf5 	bl	8000df8 <HAL_GPIO_Init>

}
 800080e:	bf00      	nop
 8000810:	3730      	adds	r7, #48	; 0x30
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000
 800081c:	48001000 	.word	0x48001000
 8000820:	48000c00 	.word	0x48000c00

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_MspInit+0x44>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_MspInit+0x44>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6193      	str	r3, [r2, #24]
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_MspInit+0x44>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_MspInit+0x44>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_MspInit+0x44>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_MspInit+0x44>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000866:	2007      	movs	r0, #7
 8000868:	f000 fa92 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <HAL_I2C_MspInit+0x7c>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d127      	bne.n	80008ea <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <HAL_I2C_MspInit+0x80>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <HAL_I2C_MspInit+0x80>)
 80008a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a4:	6153      	str	r3, [r2, #20]
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_I2C_MspInit+0x80>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80008b2:	23c0      	movs	r3, #192	; 0xc0
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b6:	2312      	movs	r3, #18
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008c2:	2304      	movs	r3, #4
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <HAL_I2C_MspInit+0x84>)
 80008ce:	f000 fa93 	bl	8000df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_I2C_MspInit+0x80>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_I2C_MspInit+0x80>)
 80008d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_I2C_MspInit+0x80>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40005400 	.word	0x40005400
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000400 	.word	0x48000400

08000900 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a17      	ldr	r2, [pc, #92]	; (800097c <HAL_SPI_MspInit+0x7c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d128      	bne.n	8000974 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <HAL_SPI_MspInit+0x80>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	4a16      	ldr	r2, [pc, #88]	; (8000980 <HAL_SPI_MspInit+0x80>)
 8000928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800092c:	6193      	str	r3, [r2, #24]
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_SPI_MspInit+0x80>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_SPI_MspInit+0x80>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <HAL_SPI_MspInit+0x80>)
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	6153      	str	r3, [r2, #20]
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_SPI_MspInit+0x80>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000952:	23e0      	movs	r3, #224	; 0xe0
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000962:	2305      	movs	r3, #5
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f000 fa42 	bl	8000df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	; 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40013000 	.word	0x40013000
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_TIM_Base_MspInit+0x38>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d10b      	bne.n	80009ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_TIM_Base_MspInit+0x3c>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <HAL_TIM_Base_MspInit+0x3c>)
 800099c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a0:	6193      	str	r3, [r2, #24]
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <HAL_TIM_Base_MspInit+0x3c>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40012c00 	.word	0x40012c00
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <HAL_PCD_MspInit+0x80>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d129      	bne.n	8000a3a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <HAL_PCD_MspInit+0x84>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <HAL_PCD_MspInit+0x84>)
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f0:	6153      	str	r3, [r2, #20]
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_PCD_MspInit+0x84>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80009fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a10:	230e      	movs	r3, #14
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f000 f9eb 	bl	8000df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_PCD_MspInit+0x84>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_PCD_MspInit+0x84>)
 8000a28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_PCD_MspInit+0x84>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3728      	adds	r7, #40	; 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40005c00 	.word	0x40005c00
 8000a48:	40021000 	.word	0x40021000

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 f884 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <SystemInit+0x20>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <SystemInit+0x20>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <Reset_Handler>:
 8000ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000afc <LoopForever+0x2>
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <LoopForever+0x6>)
 8000aca:	490e      	ldr	r1, [pc, #56]	; (8000b04 <LoopForever+0xa>)
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <LoopForever+0xe>)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:
 8000ad2:	58d4      	ldr	r4, [r2, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:
 8000ad8:	18c4      	adds	r4, r0, r3
 8000ada:	428c      	cmp	r4, r1
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <LoopForever+0x12>)
 8000ae0:	4c0b      	ldr	r4, [pc, #44]	; (8000b10 <LoopForever+0x16>)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:
 8000aea:	42a2      	cmp	r2, r4
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>
 8000aee:	f7ff ffd7 	bl	8000aa0 <SystemInit>
 8000af2:	f002 fb67 	bl	80031c4 <__libc_init_array>
 8000af6:	f7ff fc89 	bl	800040c <main>

08000afa <LoopForever>:
 8000afa:	e7fe      	b.n	8000afa <LoopForever>
 8000afc:	2000a000 	.word	0x2000a000
 8000b00:	20000000 	.word	0x20000000
 8000b04:	2000000c 	.word	0x2000000c
 8000b08:	0800326c 	.word	0x0800326c
 8000b0c:	2000000c 	.word	0x2000000c
 8000b10:	20000418 	.word	0x20000418

08000b14 <ADC1_2_IRQHandler>:
 8000b14:	e7fe      	b.n	8000b14 <ADC1_2_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x28>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x28>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f931 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f808 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fe7c 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40022000 	.word	0x40022000

08000b44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x54>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x58>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f93b 	bl	8000dde <HAL_SYSTICK_Config>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00e      	b.n	8000b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d80a      	bhi.n	8000b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f000 f911 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <HAL_InitTick+0x5c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x20>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000414 	.word	0x20000414

08000bcc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_GetTick+0x14>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000414 	.word	0x20000414

08000be4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bec:	f7ff ffee 	bl	8000bcc <HAL_GetTick>
 8000bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfc:	d005      	beq.n	8000c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_Delay+0x44>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4413      	add	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c0a:	bf00      	nop
 8000c0c:	f7ff ffde 	bl	8000bcc <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d8f7      	bhi.n	8000c0c <HAL_Delay+0x28>
  {
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008

08000c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <__NVIC_GetPriorityGrouping+0x18>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	f003 0307 	and.w	r3, r3, #7
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f7ff ff8e 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff47 	bl	8000c2c <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff5c 	bl	8000c74 <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff8e 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5d 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffb0 	bl	8000d4c <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e154      	b.n	80010b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8146 	beq.w	80010ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d005      	beq.n	8000e38 <HAL_GPIO_Init+0x40>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d130      	bne.n	8000e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	f003 0201 	and.w	r2, r3, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d017      	beq.n	8000ed6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d123      	bne.n	8000f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691a      	ldr	r2, [r3, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	6939      	ldr	r1, [r7, #16]
 8000f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0203 	and.w	r2, r3, #3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 80a0 	beq.w	80010ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6c:	4b58      	ldr	r3, [pc, #352]	; (80010d0 <HAL_GPIO_Init+0x2d8>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a57      	ldr	r2, [pc, #348]	; (80010d0 <HAL_GPIO_Init+0x2d8>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <HAL_GPIO_Init+0x2d8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f84:	4a53      	ldr	r2, [pc, #332]	; (80010d4 <HAL_GPIO_Init+0x2dc>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fae:	d019      	beq.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d013      	beq.n	8000fe0 <HAL_GPIO_Init+0x1e8>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a48      	ldr	r2, [pc, #288]	; (80010dc <HAL_GPIO_Init+0x2e4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d00d      	beq.n	8000fdc <HAL_GPIO_Init+0x1e4>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a47      	ldr	r2, [pc, #284]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d007      	beq.n	8000fd8 <HAL_GPIO_Init+0x1e0>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a46      	ldr	r2, [pc, #280]	; (80010e4 <HAL_GPIO_Init+0x2ec>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d101      	bne.n	8000fd4 <HAL_GPIO_Init+0x1dc>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	e008      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	e006      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e004      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e002      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	f002 0203 	and.w	r2, r2, #3
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	4093      	lsls	r3, r2
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ff6:	4937      	ldr	r1, [pc, #220]	; (80010d4 <HAL_GPIO_Init+0x2dc>)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001004:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <HAL_GPIO_Init+0x2f0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001028:	4a2f      	ldr	r2, [pc, #188]	; (80010e8 <HAL_GPIO_Init+0x2f0>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800102e:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <HAL_GPIO_Init+0x2f0>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001052:	4a25      	ldr	r2, [pc, #148]	; (80010e8 <HAL_GPIO_Init+0x2f0>)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <HAL_GPIO_Init+0x2f0>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800107c:	4a1a      	ldr	r2, [pc, #104]	; (80010e8 <HAL_GPIO_Init+0x2f0>)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_GPIO_Init+0x2f0>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_GPIO_Init+0x2f0>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	fa22 f303 	lsr.w	r3, r2, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f47f aea3 	bne.w	8000e08 <HAL_GPIO_Init+0x10>
  }
}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	371c      	adds	r7, #28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	48000800 	.word	0x48000800
 80010e0:	48000c00 	.word	0x48000c00
 80010e4:	48001000 	.word	0x48001000
 80010e8:	40010400 	.word	0x40010400

080010ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
 80010f8:	4613      	mov	r3, r2
 80010fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010fc:	787b      	ldrb	r3, [r7, #1]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001108:	e002      	b.n	8001110 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e081      	b.n	8001232 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d106      	bne.n	8001148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff fb98 	bl	8000878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2224      	movs	r2, #36	; 0x24
 800114c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800116c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800117c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	e006      	b.n	80011a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d104      	bne.n	80011b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691a      	ldr	r2, [r3, #16]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69d9      	ldr	r1, [r3, #28]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1a      	ldr	r2, [r3, #32]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0201 	orr.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2220      	movs	r2, #32
 800121e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b20      	cmp	r3, #32
 800124e:	d138      	bne.n	80012c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001256:	2b01      	cmp	r3, #1
 8001258:	d101      	bne.n	800125e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800125a:	2302      	movs	r3, #2
 800125c:	e032      	b.n	80012c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2224      	movs	r2, #36	; 0x24
 800126a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0201 	bic.w	r2, r2, #1
 800127c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800128c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 0201 	orr.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2220      	movs	r2, #32
 80012b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012c2:	2302      	movs	r3, #2
  }
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b20      	cmp	r3, #32
 80012e4:	d139      	bne.n	800135a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e033      	b.n	800135c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2224      	movs	r2, #36	; 0x24
 8001300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001322:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0201 	orr.w	r2, r2, #1
 8001344:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2220      	movs	r2, #32
 800134a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800135a:	2302      	movs	r3, #2
  }
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	b08b      	sub	sp, #44	; 0x2c
 800136c:	af06      	add	r7, sp, #24
 800136e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e0d0      	b.n	800151c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fb18 	bl	80009c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 fed3 	bl	800314c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	e04c      	b.n	8001446 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	440b      	add	r3, r1
 80013bc:	3301      	adds	r3, #1
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	7bfa      	ldrb	r2, [r7, #15]
 80013d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	b298      	uxth	r0, r3
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	3336      	adds	r3, #54	; 0x36
 80013ea:	4602      	mov	r2, r0
 80013ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	3303      	adds	r3, #3
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	440b      	add	r3, r1
 8001412:	3338      	adds	r3, #56	; 0x38
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	333c      	adds	r3, #60	; 0x3c
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	3340      	adds	r3, #64	; 0x40
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	3301      	adds	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	d3ad      	bcc.n	80013ac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e044      	b.n	80014e0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	3301      	adds	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3b5      	bcc.n	8001456 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	687e      	ldr	r6, [r7, #4]
 80014f2:	466d      	mov	r5, sp
 80014f4:	f106 0410 	add.w	r4, r6, #16
 80014f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	602b      	str	r3, [r5, #0]
 8001500:	1d33      	adds	r3, r6, #4
 8001502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f001 fe3c 	bl	8003182 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800152a:	af00      	add	r7, sp, #0
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	f000 bef4 	b.w	8002326 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 816a 	beq.w	8001822 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800154e:	4bb3      	ldr	r3, [pc, #716]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b04      	cmp	r3, #4
 8001558:	d00c      	beq.n	8001574 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800155a:	4bb0      	ldr	r3, [pc, #704]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b08      	cmp	r3, #8
 8001564:	d159      	bne.n	800161a <HAL_RCC_OscConfig+0xf6>
 8001566:	4bad      	ldr	r3, [pc, #692]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001572:	d152      	bne.n	800161a <HAL_RCC_OscConfig+0xf6>
 8001574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001578:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001580:	fa93 f3a3 	rbit	r3, r3
 8001584:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001588:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	fab3 f383 	clz	r3, r3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b01      	cmp	r3, #1
 800159e:	d102      	bne.n	80015a6 <HAL_RCC_OscConfig+0x82>
 80015a0:	4b9e      	ldr	r3, [pc, #632]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	e015      	b.n	80015d2 <HAL_RCC_OscConfig+0xae>
 80015a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015aa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80015ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015be:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015c2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80015ce:	4b93      	ldr	r3, [pc, #588]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015d6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80015da:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015de:	fa92 f2a2 	rbit	r2, r2
 80015e2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80015e6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80015ea:	fab2 f282 	clz	r2, r2
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	f042 0220 	orr.w	r2, r2, #32
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	f002 021f 	and.w	r2, r2, #31
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 810c 	beq.w	8001820 <HAL_RCC_OscConfig+0x2fc>
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 8106 	bne.w	8001820 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	f000 be86 	b.w	8002326 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001624:	d106      	bne.n	8001634 <HAL_RCC_OscConfig+0x110>
 8001626:	4b7d      	ldr	r3, [pc, #500]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a7c      	ldr	r2, [pc, #496]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e030      	b.n	8001696 <HAL_RCC_OscConfig+0x172>
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x134>
 800163e:	4b77      	ldr	r3, [pc, #476]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a76      	ldr	r2, [pc, #472]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b74      	ldr	r3, [pc, #464]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a73      	ldr	r2, [pc, #460]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e01e      	b.n	8001696 <HAL_RCC_OscConfig+0x172>
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001662:	d10c      	bne.n	800167e <HAL_RCC_OscConfig+0x15a>
 8001664:	4b6d      	ldr	r3, [pc, #436]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a6c      	ldr	r2, [pc, #432]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 800166a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b6a      	ldr	r3, [pc, #424]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a69      	ldr	r2, [pc, #420]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e00b      	b.n	8001696 <HAL_RCC_OscConfig+0x172>
 800167e:	4b67      	ldr	r3, [pc, #412]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a66      	ldr	r2, [pc, #408]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b64      	ldr	r3, [pc, #400]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a63      	ldr	r2, [pc, #396]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001694:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001696:	4b61      	ldr	r3, [pc, #388]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	f023 020f 	bic.w	r2, r3, #15
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	495d      	ldr	r1, [pc, #372]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d059      	beq.n	8001768 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fa8a 	bl	8000bcc <HAL_GetTick>
 80016b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016be:	f7ff fa85 	bl	8000bcc <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d902      	bls.n	80016d4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	f000 be29 	b.w	8002326 <HAL_RCC_OscConfig+0xe02>
 80016d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80016e0:	fa93 f3a3 	rbit	r3, r3
 80016e4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80016e8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ec:	fab3 f383 	clz	r3, r3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d102      	bne.n	8001706 <HAL_RCC_OscConfig+0x1e2>
 8001700:	4b46      	ldr	r3, [pc, #280]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	e015      	b.n	8001732 <HAL_RCC_OscConfig+0x20e>
 8001706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001712:	fa93 f3a3 	rbit	r3, r3
 8001716:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800171a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001722:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001736:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800173a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800173e:	fa92 f2a2 	rbit	r2, r2
 8001742:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001746:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800174a:	fab2 f282 	clz	r2, r2
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	f042 0220 	orr.w	r2, r2, #32
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	f002 021f 	and.w	r2, r2, #31
 800175a:	2101      	movs	r1, #1
 800175c:	fa01 f202 	lsl.w	r2, r1, r2
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0ab      	beq.n	80016be <HAL_RCC_OscConfig+0x19a>
 8001766:	e05c      	b.n	8001822 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fa30 	bl	8000bcc <HAL_GetTick>
 800176c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001772:	f7ff fa2b 	bl	8000bcc <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d902      	bls.n	8001788 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	f000 bdcf 	b.w	8002326 <HAL_RCC_OscConfig+0xe02>
 8001788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800178c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800179c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d102      	bne.n	80017ba <HAL_RCC_OscConfig+0x296>
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0x2c2>
 80017ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017be:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80017da:	fa93 f3a3 	rbit	r3, r3
 80017de:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_RCC_OscConfig+0x2f8>)
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80017ee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80017f2:	fa92 f2a2 	rbit	r2, r2
 80017f6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80017fa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80017fe:	fab2 f282 	clz	r2, r2
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	f042 0220 	orr.w	r2, r2, #32
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	f002 021f 	and.w	r2, r2, #31
 800180e:	2101      	movs	r1, #1
 8001810:	fa01 f202 	lsl.w	r2, r1, r2
 8001814:	4013      	ands	r3, r2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1ab      	bne.n	8001772 <HAL_RCC_OscConfig+0x24e>
 800181a:	e002      	b.n	8001822 <HAL_RCC_OscConfig+0x2fe>
 800181c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 816f 	beq.w	8001b10 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001832:	4bd0      	ldr	r3, [pc, #832]	; (8001b74 <HAL_RCC_OscConfig+0x650>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800183e:	4bcd      	ldr	r3, [pc, #820]	; (8001b74 <HAL_RCC_OscConfig+0x650>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b08      	cmp	r3, #8
 8001848:	d16c      	bne.n	8001924 <HAL_RCC_OscConfig+0x400>
 800184a:	4bca      	ldr	r3, [pc, #808]	; (8001b74 <HAL_RCC_OscConfig+0x650>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d166      	bne.n	8001924 <HAL_RCC_OscConfig+0x400>
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001868:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d102      	bne.n	8001886 <HAL_RCC_OscConfig+0x362>
 8001880:	4bbc      	ldr	r3, [pc, #752]	; (8001b74 <HAL_RCC_OscConfig+0x650>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	e013      	b.n	80018ae <HAL_RCC_OscConfig+0x38a>
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001898:	2302      	movs	r3, #2
 800189a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800189e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80018aa:	4bb2      	ldr	r3, [pc, #712]	; (8001b74 <HAL_RCC_OscConfig+0x650>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	2202      	movs	r2, #2
 80018b0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80018b4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80018b8:	fa92 f2a2 	rbit	r2, r2
 80018bc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80018c0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80018c4:	fab2 f282 	clz	r2, r2
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f042 0220 	orr.w	r2, r2, #32
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	f002 021f 	and.w	r2, r2, #31
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d007      	beq.n	80018f0 <HAL_RCC_OscConfig+0x3cc>
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d002      	beq.n	80018f0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f000 bd1b 	b.w	8002326 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f0:	4ba0      	ldr	r3, [pc, #640]	; (8001b74 <HAL_RCC_OscConfig+0x650>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	21f8      	movs	r1, #248	; 0xf8
 8001900:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001908:	fa91 f1a1 	rbit	r1, r1
 800190c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001910:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001914:	fab1 f181 	clz	r1, r1
 8001918:	b2c9      	uxtb	r1, r1
 800191a:	408b      	lsls	r3, r1
 800191c:	4995      	ldr	r1, [pc, #596]	; (8001b74 <HAL_RCC_OscConfig+0x650>)
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001922:	e0f5      	b.n	8001b10 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8085 	beq.w	8001a3a <HAL_RCC_OscConfig+0x516>
 8001930:	2301      	movs	r3, #1
 8001932:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001942:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001950:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	461a      	mov	r2, r3
 8001958:	2301      	movs	r3, #1
 800195a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff f936 	bl	8000bcc <HAL_GetTick>
 8001960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff f931 	bl	8000bcc <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d902      	bls.n	800197c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	f000 bcd5 	b.w	8002326 <HAL_RCC_OscConfig+0xe02>
 800197c:	2302      	movs	r3, #2
 800197e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800198e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	095b      	lsrs	r3, r3, #5
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d102      	bne.n	80019ac <HAL_RCC_OscConfig+0x488>
 80019a6:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <HAL_RCC_OscConfig+0x650>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	e013      	b.n	80019d4 <HAL_RCC_OscConfig+0x4b0>
 80019ac:	2302      	movs	r3, #2
 80019ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80019be:	2302      	movs	r3, #2
 80019c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80019c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80019d0:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <HAL_RCC_OscConfig+0x650>)
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	2202      	movs	r2, #2
 80019d6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80019da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019de:	fa92 f2a2 	rbit	r2, r2
 80019e2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80019e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80019ea:	fab2 f282 	clz	r2, r2
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	f042 0220 	orr.w	r2, r2, #32
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	f002 021f 	and.w	r2, r2, #31
 80019fa:	2101      	movs	r1, #1
 80019fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0af      	beq.n	8001966 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a06:	4b5b      	ldr	r3, [pc, #364]	; (8001b74 <HAL_RCC_OscConfig+0x650>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	21f8      	movs	r1, #248	; 0xf8
 8001a16:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a1e:	fa91 f1a1 	rbit	r1, r1
 8001a22:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001a26:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001a2a:	fab1 f181 	clz	r1, r1
 8001a2e:	b2c9      	uxtb	r1, r1
 8001a30:	408b      	lsls	r3, r1
 8001a32:	4950      	ldr	r1, [pc, #320]	; (8001b74 <HAL_RCC_OscConfig+0x650>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e06a      	b.n	8001b10 <HAL_RCC_OscConfig+0x5ec>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001a4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	461a      	mov	r2, r3
 8001a62:	2300      	movs	r3, #0
 8001a64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff f8b1 	bl	8000bcc <HAL_GetTick>
 8001a6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff f8ac 	bl	8000bcc <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d902      	bls.n	8001a86 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	f000 bc50 	b.w	8002326 <HAL_RCC_OscConfig+0xe02>
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9c:	fab3 f383 	clz	r3, r3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d102      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x592>
 8001ab0:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <HAL_RCC_OscConfig+0x650>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	e013      	b.n	8001ade <HAL_RCC_OscConfig+0x5ba>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ace:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_RCC_OscConfig+0x650>)
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001ae4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ae8:	fa92 f2a2 	rbit	r2, r2
 8001aec:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001af0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001af4:	fab2 f282 	clz	r2, r2
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	f042 0220 	orr.w	r2, r2, #32
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f002 021f 	and.w	r2, r2, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1af      	bne.n	8001a70 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 80da 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d069      	beq.n	8001bfe <HAL_RCC_OscConfig+0x6da>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b34:	fa93 f3a3 	rbit	r3, r3
 8001b38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_OscConfig+0x654>)
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2301      	movs	r3, #1
 8001b52:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7ff f83a 	bl	8000bcc <HAL_GetTick>
 8001b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5c:	e00e      	b.n	8001b7c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b5e:	f7ff f835 	bl	8000bcc <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d906      	bls.n	8001b7c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e3d9      	b.n	8002326 <HAL_RCC_OscConfig+0xe02>
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	10908120 	.word	0x10908120
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b8e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b92:	2202      	movs	r2, #2
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	fa93 f2a3 	rbit	r2, r3
 8001ba0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001baa:	2202      	movs	r2, #2
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001bbc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	4ba5      	ldr	r3, [pc, #660]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	6019      	str	r1, [r3, #0]
 8001bca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	fa93 f1a3 	rbit	r1, r3
 8001bd4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bd8:	6019      	str	r1, [r3, #0]
  return result;
 8001bda:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0b0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x63a>
 8001bfc:	e06a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7b0>
 8001bfe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	fa93 f2a3 	rbit	r2, r3
 8001c10:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c14:	601a      	str	r2, [r3, #0]
  return result;
 8001c16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c1a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b8c      	ldr	r3, [pc, #560]	; (8001e58 <HAL_RCC_OscConfig+0x934>)
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c30:	f7fe ffcc 	bl	8000bcc <HAL_GetTick>
 8001c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c38:	e009      	b.n	8001c4e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3a:	f7fe ffc7 	bl	8000bcc <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e36b      	b.n	8002326 <HAL_RCC_OscConfig+0xe02>
 8001c4e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c52:	2202      	movs	r2, #2
 8001c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	fa93 f2a3 	rbit	r2, r3
 8001c78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c82:	2202      	movs	r2, #2
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	fa93 f2a3 	rbit	r2, r3
 8001c90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c96:	4b6f      	ldr	r3, [pc, #444]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	6019      	str	r1, [r3, #0]
 8001ca2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	fa93 f1a3 	rbit	r1, r3
 8001cac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cb0:	6019      	str	r1, [r3, #0]
  return result;
 8001cb2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fab3 f383 	clz	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1b2      	bne.n	8001c3a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8158 	beq.w	8001f94 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cea:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d112      	bne.n	8001d1c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4a56      	ldr	r2, [pc, #344]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	61d3      	str	r3, [r2, #28]
 8001d02:	4b54      	ldr	r3, [pc, #336]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d0a:	f107 0308 	add.w	r3, r7, #8
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	f107 0308 	add.w	r3, r7, #8
 8001d14:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d16:	2301      	movs	r3, #1
 8001d18:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	4b4f      	ldr	r3, [pc, #316]	; (8001e5c <HAL_RCC_OscConfig+0x938>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d11a      	bne.n	8001d5e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d28:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <HAL_RCC_OscConfig+0x938>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a4b      	ldr	r2, [pc, #300]	; (8001e5c <HAL_RCC_OscConfig+0x938>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d34:	f7fe ff4a 	bl	8000bcc <HAL_GetTick>
 8001d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	e009      	b.n	8001d52 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7fe ff45 	bl	8000bcc <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e2e9      	b.n	8002326 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d52:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <HAL_RCC_OscConfig+0x938>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0ef      	beq.n	8001d3e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x852>
 8001d68:	4b3a      	ldr	r3, [pc, #232]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a39      	ldr	r2, [pc, #228]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e02f      	b.n	8001dd6 <HAL_RCC_OscConfig+0x8b2>
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x876>
 8001d80:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a33      	ldr	r2, [pc, #204]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a30      	ldr	r2, [pc, #192]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001d92:	f023 0304 	bic.w	r3, r3, #4
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e01d      	b.n	8001dd6 <HAL_RCC_OscConfig+0x8b2>
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d10c      	bne.n	8001dbe <HAL_RCC_OscConfig+0x89a>
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a2a      	ldr	r2, [pc, #168]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6213      	str	r3, [r2, #32]
 8001db0:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6213      	str	r3, [r2, #32]
 8001dbc:	e00b      	b.n	8001dd6 <HAL_RCC_OscConfig+0x8b2>
 8001dbe:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a24      	ldr	r2, [pc, #144]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d06b      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de0:	f7fe fef4 	bl	8000bcc <HAL_GetTick>
 8001de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de8:	e00b      	b.n	8001e02 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7fe feef 	bl	8000bcc <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e291      	b.n	8002326 <HAL_RCC_OscConfig+0xe02>
 8001e02:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e06:	2202      	movs	r2, #2
 8001e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	fa93 f2a3 	rbit	r2, r3
 8001e14:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e1e:	2202      	movs	r2, #2
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e30:	601a      	str	r2, [r3, #0]
  return result;
 8001e32:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f043 0302 	orr.w	r3, r3, #2
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d109      	bne.n	8001e60 <HAL_RCC_OscConfig+0x93c>
 8001e4c:	4b01      	ldr	r3, [pc, #4]	; (8001e54 <HAL_RCC_OscConfig+0x930>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	e014      	b.n	8001e7c <HAL_RCC_OscConfig+0x958>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	10908120 	.word	0x10908120
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e64:	2202      	movs	r2, #2
 8001e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f2a3 	rbit	r2, r3
 8001e72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	4bbb      	ldr	r3, [pc, #748]	; (8002168 <HAL_RCC_OscConfig+0xc44>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e80:	2102      	movs	r1, #2
 8001e82:	6011      	str	r1, [r2, #0]
 8001e84:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	fa92 f1a2 	rbit	r1, r2
 8001e8e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001e92:	6011      	str	r1, [r2, #0]
  return result;
 8001e94:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	fab2 f282 	clz	r2, r2
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	f002 021f 	and.w	r2, r2, #31
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d099      	beq.n	8001dea <HAL_RCC_OscConfig+0x8c6>
 8001eb6:	e063      	b.n	8001f80 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7fe fe88 	bl	8000bcc <HAL_GetTick>
 8001ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec0:	e00b      	b.n	8001eda <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7fe fe83 	bl	8000bcc <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e225      	b.n	8002326 <HAL_RCC_OscConfig+0xe02>
 8001eda:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ede:	2202      	movs	r2, #2
 8001ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	fa93 f2a3 	rbit	r2, r3
 8001eec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f08:	601a      	str	r2, [r3, #0]
  return result;
 8001f0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d102      	bne.n	8001f2a <HAL_RCC_OscConfig+0xa06>
 8001f24:	4b90      	ldr	r3, [pc, #576]	; (8002168 <HAL_RCC_OscConfig+0xc44>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	e00d      	b.n	8001f46 <HAL_RCC_OscConfig+0xa22>
 8001f2a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f2e:	2202      	movs	r2, #2
 8001f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	fa93 f2a3 	rbit	r2, r3
 8001f3c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	4b89      	ldr	r3, [pc, #548]	; (8002168 <HAL_RCC_OscConfig+0xc44>)
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	6011      	str	r1, [r2, #0]
 8001f4e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	fa92 f1a2 	rbit	r1, r2
 8001f58:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f5c:	6011      	str	r1, [r2, #0]
  return result;
 8001f5e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	fab2 f282 	clz	r2, r2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f002 021f 	and.w	r2, r2, #31
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1a0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f80:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f88:	4b77      	ldr	r3, [pc, #476]	; (8002168 <HAL_RCC_OscConfig+0xc44>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	4a76      	ldr	r2, [pc, #472]	; (8002168 <HAL_RCC_OscConfig+0xc44>)
 8001f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f92:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 81c2 	beq.w	8002324 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa0:	4b71      	ldr	r3, [pc, #452]	; (8002168 <HAL_RCC_OscConfig+0xc44>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	f000 819c 	beq.w	80022e6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	f040 8114 	bne.w	80021e2 <HAL_RCC_OscConfig+0xcbe>
 8001fba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	fa93 f2a3 	rbit	r2, r3
 8001fce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fd2:	601a      	str	r2, [r3, #0]
  return result;
 8001fd4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fd8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fe4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	461a      	mov	r2, r3
 8001fec:	2300      	movs	r3, #0
 8001fee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fdec 	bl	8000bcc <HAL_GetTick>
 8001ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff8:	e009      	b.n	800200e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffa:	f7fe fde7 	bl	8000bcc <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e18b      	b.n	8002326 <HAL_RCC_OscConfig+0xe02>
 800200e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002012:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	fa93 f2a3 	rbit	r2, r3
 8002022:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002026:	601a      	str	r2, [r3, #0]
  return result;
 8002028:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800202c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d102      	bne.n	8002048 <HAL_RCC_OscConfig+0xb24>
 8002042:	4b49      	ldr	r3, [pc, #292]	; (8002168 <HAL_RCC_OscConfig+0xc44>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	e01b      	b.n	8002080 <HAL_RCC_OscConfig+0xb5c>
 8002048:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800204c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	fa93 f2a3 	rbit	r2, r3
 800205c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	fa93 f2a3 	rbit	r2, r3
 8002076:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <HAL_RCC_OscConfig+0xc44>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002084:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002088:	6011      	str	r1, [r2, #0]
 800208a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	fa92 f1a2 	rbit	r1, r2
 8002094:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002098:	6011      	str	r1, [r2, #0]
  return result;
 800209a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	fab2 f282 	clz	r2, r2
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	f042 0220 	orr.w	r2, r2, #32
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	f002 021f 	and.w	r2, r2, #31
 80020b0:	2101      	movs	r1, #1
 80020b2:	fa01 f202 	lsl.w	r2, r1, r2
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d19e      	bne.n	8001ffa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020bc:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <HAL_RCC_OscConfig+0xc44>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	430b      	orrs	r3, r1
 80020d2:	4925      	ldr	r1, [pc, #148]	; (8002168 <HAL_RCC_OscConfig+0xc44>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
 80020d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	fa93 f2a3 	rbit	r2, r3
 80020ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020f0:	601a      	str	r2, [r3, #0]
  return result;
 80020f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020f6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002102:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	461a      	mov	r2, r3
 800210a:	2301      	movs	r3, #1
 800210c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe fd5d 	bl	8000bcc <HAL_GetTick>
 8002112:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002116:	e009      	b.n	800212c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fd58 	bl	8000bcc <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e0fc      	b.n	8002326 <HAL_RCC_OscConfig+0xe02>
 800212c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	fa93 f2a3 	rbit	r2, r3
 8002140:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002144:	601a      	str	r2, [r3, #0]
  return result;
 8002146:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800214a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_RCC_OscConfig+0xc48>
 8002160:	4b01      	ldr	r3, [pc, #4]	; (8002168 <HAL_RCC_OscConfig+0xc44>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	e01e      	b.n	80021a4 <HAL_RCC_OscConfig+0xc80>
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002170:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800218a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	fa93 f2a3 	rbit	r2, r3
 800219a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	4b63      	ldr	r3, [pc, #396]	; (8002330 <HAL_RCC_OscConfig+0xe0c>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021ac:	6011      	str	r1, [r2, #0]
 80021ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	fa92 f1a2 	rbit	r1, r2
 80021b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021bc:	6011      	str	r1, [r2, #0]
  return result;
 80021be:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	fab2 f282 	clz	r2, r2
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	f042 0220 	orr.w	r2, r2, #32
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	f002 021f 	and.w	r2, r2, #31
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f202 	lsl.w	r2, r1, r2
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d09b      	beq.n	8002118 <HAL_RCC_OscConfig+0xbf4>
 80021e0:	e0a0      	b.n	8002324 <HAL_RCC_OscConfig+0xe00>
 80021e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	fa93 f2a3 	rbit	r2, r3
 80021f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021fa:	601a      	str	r2, [r3, #0]
  return result;
 80021fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002200:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800220c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	461a      	mov	r2, r3
 8002214:	2300      	movs	r3, #0
 8002216:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe fcd8 	bl	8000bcc <HAL_GetTick>
 800221c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002220:	e009      	b.n	8002236 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002222:	f7fe fcd3 	bl	8000bcc <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e077      	b.n	8002326 <HAL_RCC_OscConfig+0xe02>
 8002236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800223e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	fa93 f2a3 	rbit	r2, r3
 800224a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224e:	601a      	str	r2, [r3, #0]
  return result;
 8002250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002254:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	095b      	lsrs	r3, r3, #5
 800225e:	b2db      	uxtb	r3, r3
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d102      	bne.n	8002270 <HAL_RCC_OscConfig+0xd4c>
 800226a:	4b31      	ldr	r3, [pc, #196]	; (8002330 <HAL_RCC_OscConfig+0xe0c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	e01b      	b.n	80022a8 <HAL_RCC_OscConfig+0xd84>
 8002270:	f107 0320 	add.w	r3, r7, #32
 8002274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f107 0320 	add.w	r3, r7, #32
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f107 0318 	add.w	r3, r7, #24
 800228e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	f107 0318 	add.w	r3, r7, #24
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	fa93 f2a3 	rbit	r2, r3
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <HAL_RCC_OscConfig+0xe0c>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	f107 0210 	add.w	r2, r7, #16
 80022ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022b0:	6011      	str	r1, [r2, #0]
 80022b2:	f107 0210 	add.w	r2, r7, #16
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	fa92 f1a2 	rbit	r1, r2
 80022bc:	f107 020c 	add.w	r2, r7, #12
 80022c0:	6011      	str	r1, [r2, #0]
  return result;
 80022c2:	f107 020c 	add.w	r2, r7, #12
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	fab2 f282 	clz	r2, r2
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	f042 0220 	orr.w	r2, r2, #32
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f002 021f 	and.w	r2, r2, #31
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f202 	lsl.w	r2, r1, r2
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d19e      	bne.n	8002222 <HAL_RCC_OscConfig+0xcfe>
 80022e4:	e01e      	b.n	8002324 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e018      	b.n	8002326 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_RCC_OscConfig+0xe0c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022fc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002300:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	429a      	cmp	r2, r3
 800230c:	d108      	bne.n	8002320 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800230e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002312:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000

08002334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b09e      	sub	sp, #120	; 0x78
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e162      	b.n	8002612 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b90      	ldr	r3, [pc, #576]	; (8002590 <HAL_RCC_ClockConfig+0x25c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d910      	bls.n	800237c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b8d      	ldr	r3, [pc, #564]	; (8002590 <HAL_RCC_ClockConfig+0x25c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 0207 	bic.w	r2, r3, #7
 8002362:	498b      	ldr	r1, [pc, #556]	; (8002590 <HAL_RCC_ClockConfig+0x25c>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b89      	ldr	r3, [pc, #548]	; (8002590 <HAL_RCC_ClockConfig+0x25c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e14a      	b.n	8002612 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002388:	4b82      	ldr	r3, [pc, #520]	; (8002594 <HAL_RCC_ClockConfig+0x260>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	497f      	ldr	r1, [pc, #508]	; (8002594 <HAL_RCC_ClockConfig+0x260>)
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80dc 	beq.w	8002560 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d13c      	bne.n	800242a <HAL_RCC_ClockConfig+0xf6>
 80023b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d102      	bne.n	80023da <HAL_RCC_ClockConfig+0xa6>
 80023d4:	4b6f      	ldr	r3, [pc, #444]	; (8002594 <HAL_RCC_ClockConfig+0x260>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	e00f      	b.n	80023fa <HAL_RCC_ClockConfig+0xc6>
 80023da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	667b      	str	r3, [r7, #100]	; 0x64
 80023e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ec:	663b      	str	r3, [r7, #96]	; 0x60
 80023ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023f6:	4b67      	ldr	r3, [pc, #412]	; (8002594 <HAL_RCC_ClockConfig+0x260>)
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002400:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002402:	fa92 f2a2 	rbit	r2, r2
 8002406:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002408:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800240a:	fab2 f282 	clz	r2, r2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f042 0220 	orr.w	r2, r2, #32
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	f002 021f 	and.w	r2, r2, #31
 800241a:	2101      	movs	r1, #1
 800241c:	fa01 f202 	lsl.w	r2, r1, r2
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d17b      	bne.n	800251e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e0f3      	b.n	8002612 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d13c      	bne.n	80024ac <HAL_RCC_ClockConfig+0x178>
 8002432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002436:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d102      	bne.n	800245c <HAL_RCC_ClockConfig+0x128>
 8002456:	4b4f      	ldr	r3, [pc, #316]	; (8002594 <HAL_RCC_ClockConfig+0x260>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	e00f      	b.n	800247c <HAL_RCC_ClockConfig+0x148>
 800245c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002460:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	647b      	str	r3, [r7, #68]	; 0x44
 800246a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800246e:	643b      	str	r3, [r7, #64]	; 0x40
 8002470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCC_ClockConfig+0x260>)
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002480:	63ba      	str	r2, [r7, #56]	; 0x38
 8002482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002484:	fa92 f2a2 	rbit	r2, r2
 8002488:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800248a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800248c:	fab2 f282 	clz	r2, r2
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	f042 0220 	orr.w	r2, r2, #32
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	f002 021f 	and.w	r2, r2, #31
 800249c:	2101      	movs	r1, #1
 800249e:	fa01 f202 	lsl.w	r2, r1, r2
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d13a      	bne.n	800251e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0b2      	b.n	8002612 <HAL_RCC_ClockConfig+0x2de>
 80024ac:	2302      	movs	r3, #2
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d102      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x1a0>
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <HAL_RCC_ClockConfig+0x260>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	e00d      	b.n	80024f0 <HAL_RCC_ClockConfig+0x1bc>
 80024d4:	2302      	movs	r3, #2
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
 80024e0:	2302      	movs	r3, #2
 80024e2:	623b      	str	r3, [r7, #32]
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	4b29      	ldr	r3, [pc, #164]	; (8002594 <HAL_RCC_ClockConfig+0x260>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	2202      	movs	r2, #2
 80024f2:	61ba      	str	r2, [r7, #24]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	fa92 f2a2 	rbit	r2, r2
 80024fa:	617a      	str	r2, [r7, #20]
  return result;
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	fab2 f282 	clz	r2, r2
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f042 0220 	orr.w	r2, r2, #32
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f002 021f 	and.w	r2, r2, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e079      	b.n	8002612 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCC_ClockConfig+0x260>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	491a      	ldr	r1, [pc, #104]	; (8002594 <HAL_RCC_ClockConfig+0x260>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7fe fb4c 	bl	8000bcc <HAL_GetTick>
 8002534:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7fe fb48 	bl	8000bcc <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e061      	b.n	8002612 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_RCC_ClockConfig+0x260>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_ClockConfig+0x25c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d214      	bcs.n	8002598 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_RCC_ClockConfig+0x25c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4906      	ldr	r1, [pc, #24]	; (8002590 <HAL_RCC_ClockConfig+0x25c>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <HAL_RCC_ClockConfig+0x25c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e040      	b.n	8002612 <HAL_RCC_ClockConfig+0x2de>
 8002590:	40022000 	.word	0x40022000
 8002594:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCC_ClockConfig+0x2e8>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	491a      	ldr	r1, [pc, #104]	; (800261c <HAL_RCC_ClockConfig+0x2e8>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <HAL_RCC_ClockConfig+0x2e8>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4912      	ldr	r1, [pc, #72]	; (800261c <HAL_RCC_ClockConfig+0x2e8>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025d6:	f000 f829 	bl	800262c <HAL_RCC_GetSysClockFreq>
 80025da:	4601      	mov	r1, r0
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_RCC_ClockConfig+0x2e8>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e4:	22f0      	movs	r2, #240	; 0xf0
 80025e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	fa92 f2a2 	rbit	r2, r2
 80025ee:	60fa      	str	r2, [r7, #12]
  return result;
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	fab2 f282 	clz	r2, r2
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	40d3      	lsrs	r3, r2
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x2ec>)
 80025fc:	5cd3      	ldrb	r3, [r2, r3]
 80025fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002602:	4a08      	ldr	r2, [pc, #32]	; (8002624 <HAL_RCC_ClockConfig+0x2f0>)
 8002604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_RCC_ClockConfig+0x2f4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fa9a 	bl	8000b44 <HAL_InitTick>
  
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3778      	adds	r7, #120	; 0x78
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	08003234 	.word	0x08003234
 8002624:	20000000 	.word	0x20000000
 8002628:	20000004 	.word	0x20000004

0800262c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	b08b      	sub	sp, #44	; 0x2c
 8002630:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002646:	4b29      	ldr	r3, [pc, #164]	; (80026ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b04      	cmp	r3, #4
 8002654:	d002      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x30>
 8002656:	2b08      	cmp	r3, #8
 8002658:	d003      	beq.n	8002662 <HAL_RCC_GetSysClockFreq+0x36>
 800265a:	e03c      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800265c:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800265e:	623b      	str	r3, [r7, #32]
      break;
 8002660:	e03c      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002668:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800266c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	fa92 f2a2 	rbit	r2, r2
 8002674:	607a      	str	r2, [r7, #4]
  return result;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	fab2 f282 	clz	r2, r2
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	40d3      	lsrs	r3, r2
 8002680:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002686:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	220f      	movs	r2, #15
 8002690:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	fa92 f2a2 	rbit	r2, r2
 8002698:	60fa      	str	r2, [r7, #12]
  return result;
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	fab2 f282 	clz	r2, r2
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	40d3      	lsrs	r3, r2
 80026a4:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
 80026a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026b4:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
 80026c4:	e004      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	623b      	str	r3, [r7, #32]
      break;
 80026d4:	e002      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026d8:	623b      	str	r3, [r7, #32]
      break;
 80026da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026dc:	6a3b      	ldr	r3, [r7, #32]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	372c      	adds	r7, #44	; 0x2c
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	007a1200 	.word	0x007a1200
 80026f4:	08003244 	.word	0x08003244
 80026f8:	08003254 	.word	0x08003254
 80026fc:	003d0900 	.word	0x003d0900

08002700 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b092      	sub	sp, #72	; 0x48
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002710:	2300      	movs	r3, #0
 8002712:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80d4 	beq.w	80028cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002724:	4b4e      	ldr	r3, [pc, #312]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10e      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b4b      	ldr	r3, [pc, #300]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	4a4a      	ldr	r2, [pc, #296]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273a:	61d3      	str	r3, [r2, #28]
 800273c:	4b48      	ldr	r3, [pc, #288]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002748:	2301      	movs	r3, #1
 800274a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274e:	4b45      	ldr	r3, [pc, #276]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d118      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800275a:	4b42      	ldr	r3, [pc, #264]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a41      	ldr	r2, [pc, #260]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002766:	f7fe fa31 	bl	8000bcc <HAL_GetTick>
 800276a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	e008      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276e:	f7fe fa2d 	bl	8000bcc <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b64      	cmp	r3, #100	; 0x64
 800277a:	d901      	bls.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e169      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002780:	4b38      	ldr	r3, [pc, #224]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800278c:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002794:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8084 	beq.w	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d07c      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ac:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b26      	ldr	r3, [pc, #152]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	461a      	mov	r2, r3
 80027d6:	2301      	movs	r3, #1
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	461a      	mov	r2, r3
 80027fa:	2300      	movs	r3, #0
 80027fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027fe:	4a18      	ldr	r2, [pc, #96]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002802:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d04b      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe f9dd 	bl	8000bcc <HAL_GetTick>
 8002812:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7fe f9d9 	bl	8000bcc <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e113      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800282c:	2302      	movs	r3, #2
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
 8002838:	2302      	movs	r3, #2
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	61fb      	str	r3, [r7, #28]
  return result;
 8002844:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d108      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800285a:	4b01      	ldr	r3, [pc, #4]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	e00d      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002860:	40021000 	.word	0x40021000
 8002864:	40007000 	.word	0x40007000
 8002868:	10908100 	.word	0x10908100
 800286c:	2302      	movs	r3, #2
 800286e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	4b78      	ldr	r3, [pc, #480]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	2202      	movs	r2, #2
 800287e:	613a      	str	r2, [r7, #16]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	fa92 f2a2 	rbit	r2, r2
 8002886:	60fa      	str	r2, [r7, #12]
  return result;
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	fab2 f282 	clz	r2, r2
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	f002 021f 	and.w	r2, r2, #31
 800289a:	2101      	movs	r1, #1
 800289c:	fa01 f202 	lsl.w	r2, r1, r2
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0b7      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028a6:	4b6d      	ldr	r3, [pc, #436]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	496a      	ldr	r1, [pc, #424]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c0:	4b66      	ldr	r3, [pc, #408]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	4a65      	ldr	r2, [pc, #404]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028d8:	4b60      	ldr	r3, [pc, #384]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	f023 0203 	bic.w	r2, r3, #3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	495d      	ldr	r1, [pc, #372]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028f6:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	4956      	ldr	r1, [pc, #344]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002904:	4313      	orrs	r3, r2
 8002906:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002914:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	494e      	ldr	r1, [pc, #312]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002922:	4313      	orrs	r3, r2
 8002924:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002932:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f023 0210 	bic.w	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	4947      	ldr	r1, [pc, #284]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002940:	4313      	orrs	r3, r2
 8002942:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002950:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	493f      	ldr	r1, [pc, #252]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d008      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800296e:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f023 0220 	bic.w	r2, r3, #32
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4938      	ldr	r1, [pc, #224]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800297c:	4313      	orrs	r3, r2
 800297e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800298c:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	4930      	ldr	r1, [pc, #192]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800299a:	4313      	orrs	r3, r2
 800299c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029aa:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	4929      	ldr	r1, [pc, #164]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029c8:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	4921      	ldr	r1, [pc, #132]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029e6:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	491a      	ldr	r1, [pc, #104]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	4912      	ldr	r1, [pc, #72]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d008      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	490b      	ldr	r1, [pc, #44]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4c:	4903      	ldr	r1, [pc, #12]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3748      	adds	r7, #72	; 0x48
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e09d      	b.n	8002bae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d108      	bne.n	8002a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a82:	d009      	beq.n	8002a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
 8002a8a:	e005      	b.n	8002a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fd ff24 	bl	8000900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ace:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ad8:	d902      	bls.n	8002ae0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e002      	b.n	8002ae6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002aee:	d007      	beq.n	8002b00 <HAL_SPI_Init+0xa0>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002af8:	d002      	beq.n	8002b00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	ea42 0103 	orr.w	r1, r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	0c1b      	lsrs	r3, r3, #16
 8002b5c:	f003 0204 	and.w	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b7c:	ea42 0103 	orr.w	r1, r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e049      	b.n	8002c5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd fed1 	bl	8000984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f000 f8ff 	bl	8002df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_TIM_ConfigClockSource+0x1c>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e0b6      	b.n	8002dee <HAL_TIM_ConfigClockSource+0x18a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cbc:	d03e      	beq.n	8002d3c <HAL_TIM_ConfigClockSource+0xd8>
 8002cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc2:	f200 8087 	bhi.w	8002dd4 <HAL_TIM_ConfigClockSource+0x170>
 8002cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cca:	f000 8086 	beq.w	8002dda <HAL_TIM_ConfigClockSource+0x176>
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd2:	d87f      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x170>
 8002cd4:	2b70      	cmp	r3, #112	; 0x70
 8002cd6:	d01a      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0xaa>
 8002cd8:	2b70      	cmp	r3, #112	; 0x70
 8002cda:	d87b      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x170>
 8002cdc:	2b60      	cmp	r3, #96	; 0x60
 8002cde:	d050      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0x11e>
 8002ce0:	2b60      	cmp	r3, #96	; 0x60
 8002ce2:	d877      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x170>
 8002ce4:	2b50      	cmp	r3, #80	; 0x50
 8002ce6:	d03c      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0xfe>
 8002ce8:	2b50      	cmp	r3, #80	; 0x50
 8002cea:	d873      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x170>
 8002cec:	2b40      	cmp	r3, #64	; 0x40
 8002cee:	d058      	beq.n	8002da2 <HAL_TIM_ConfigClockSource+0x13e>
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	d86f      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x170>
 8002cf4:	2b30      	cmp	r3, #48	; 0x30
 8002cf6:	d064      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8002cf8:	2b30      	cmp	r3, #48	; 0x30
 8002cfa:	d86b      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x170>
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d060      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d867      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x170>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d05c      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d05a      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8002d0c:	e062      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6899      	ldr	r1, [r3, #8]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f000 f975 	bl	800300c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	609a      	str	r2, [r3, #8]
      break;
 8002d3a:	e04f      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6899      	ldr	r1, [r3, #8]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f000 f95e 	bl	800300c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d5e:	609a      	str	r2, [r3, #8]
      break;
 8002d60:	e03c      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6859      	ldr	r1, [r3, #4]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f000 f8d2 	bl	8002f18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2150      	movs	r1, #80	; 0x50
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f92b 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 8002d80:	e02c      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f000 f8f1 	bl	8002f76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2160      	movs	r1, #96	; 0x60
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f91b 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 8002da0:	e01c      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6859      	ldr	r1, [r3, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	461a      	mov	r2, r3
 8002db0:	f000 f8b2 	bl	8002f18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2140      	movs	r1, #64	; 0x40
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f90b 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 8002dc0:	e00c      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	f000 f902 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 8002dd2:	e003      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd8:	e000      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a3c      	ldr	r2, [pc, #240]	; (8002efc <TIM_Base_SetConfig+0x104>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00f      	beq.n	8002e30 <TIM_Base_SetConfig+0x38>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e16:	d00b      	beq.n	8002e30 <TIM_Base_SetConfig+0x38>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a39      	ldr	r2, [pc, #228]	; (8002f00 <TIM_Base_SetConfig+0x108>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d007      	beq.n	8002e30 <TIM_Base_SetConfig+0x38>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <TIM_Base_SetConfig+0x10c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d003      	beq.n	8002e30 <TIM_Base_SetConfig+0x38>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a37      	ldr	r2, [pc, #220]	; (8002f08 <TIM_Base_SetConfig+0x110>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d108      	bne.n	8002e42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2d      	ldr	r2, [pc, #180]	; (8002efc <TIM_Base_SetConfig+0x104>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01b      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e50:	d017      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a2a      	ldr	r2, [pc, #168]	; (8002f00 <TIM_Base_SetConfig+0x108>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a29      	ldr	r2, [pc, #164]	; (8002f04 <TIM_Base_SetConfig+0x10c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00f      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <TIM_Base_SetConfig+0x110>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <TIM_Base_SetConfig+0x114>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <TIM_Base_SetConfig+0x118>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d003      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a25      	ldr	r2, [pc, #148]	; (8002f14 <TIM_Base_SetConfig+0x11c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <TIM_Base_SetConfig+0x104>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00f      	beq.n	8002ee0 <TIM_Base_SetConfig+0xe8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a11      	ldr	r2, [pc, #68]	; (8002f08 <TIM_Base_SetConfig+0x110>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00b      	beq.n	8002ee0 <TIM_Base_SetConfig+0xe8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <TIM_Base_SetConfig+0x114>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d007      	beq.n	8002ee0 <TIM_Base_SetConfig+0xe8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a0f      	ldr	r2, [pc, #60]	; (8002f10 <TIM_Base_SetConfig+0x118>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d003      	beq.n	8002ee0 <TIM_Base_SetConfig+0xe8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <TIM_Base_SetConfig+0x11c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d103      	bne.n	8002ee8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	615a      	str	r2, [r3, #20]
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40012c00 	.word	0x40012c00
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40000800 	.word	0x40000800
 8002f08:	40013400 	.word	0x40013400
 8002f0c:	40014000 	.word	0x40014000
 8002f10:	40014400 	.word	0x40014400
 8002f14:	40014800 	.word	0x40014800

08002f18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f023 0201 	bic.w	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f023 030a 	bic.w	r3, r3, #10
 8002f54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b087      	sub	sp, #28
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f023 0210 	bic.w	r2, r3, #16
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	031b      	lsls	r3, r3, #12
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b085      	sub	sp, #20
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f043 0307 	orr.w	r3, r3, #7
 8002ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	609a      	str	r2, [r3, #8]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	021a      	lsls	r2, r3, #8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	431a      	orrs	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	609a      	str	r2, [r3, #8]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003060:	2302      	movs	r3, #2
 8003062:	e063      	b.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2b      	ldr	r2, [pc, #172]	; (8003138 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2a      	ldr	r2, [pc, #168]	; (800313c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d108      	bne.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800309e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1b      	ldr	r2, [pc, #108]	; (8003138 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d018      	beq.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d6:	d013      	beq.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a18      	ldr	r2, [pc, #96]	; (8003140 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00e      	beq.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a17      	ldr	r2, [pc, #92]	; (8003144 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d009      	beq.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a12      	ldr	r2, [pc, #72]	; (800313c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d004      	beq.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a13      	ldr	r2, [pc, #76]	; (8003148 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d10c      	bne.n	800311a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003106:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	4313      	orrs	r3, r2
 8003110:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40013400 	.word	0x40013400
 8003140:	40000400 	.word	0x40000400
 8003144:	40000800 	.word	0x40000800
 8003148:	40014000 	.word	0x40014000

0800314c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003154:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003158:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	b29b      	uxth	r3, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	b29b      	uxth	r3, r3
 800316a:	4013      	ands	r3, r2
 800316c:	b29a      	uxth	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003182:	b084      	sub	sp, #16
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	f107 0014 	add.w	r0, r7, #20
 8003190:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	b004      	add	sp, #16
 80031c2:	4770      	bx	lr

080031c4 <__libc_init_array>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	4d0d      	ldr	r5, [pc, #52]	; (80031fc <__libc_init_array+0x38>)
 80031c8:	4c0d      	ldr	r4, [pc, #52]	; (8003200 <__libc_init_array+0x3c>)
 80031ca:	1b64      	subs	r4, r4, r5
 80031cc:	10a4      	asrs	r4, r4, #2
 80031ce:	2600      	movs	r6, #0
 80031d0:	42a6      	cmp	r6, r4
 80031d2:	d109      	bne.n	80031e8 <__libc_init_array+0x24>
 80031d4:	4d0b      	ldr	r5, [pc, #44]	; (8003204 <__libc_init_array+0x40>)
 80031d6:	4c0c      	ldr	r4, [pc, #48]	; (8003208 <__libc_init_array+0x44>)
 80031d8:	f000 f820 	bl	800321c <_init>
 80031dc:	1b64      	subs	r4, r4, r5
 80031de:	10a4      	asrs	r4, r4, #2
 80031e0:	2600      	movs	r6, #0
 80031e2:	42a6      	cmp	r6, r4
 80031e4:	d105      	bne.n	80031f2 <__libc_init_array+0x2e>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ec:	4798      	blx	r3
 80031ee:	3601      	adds	r6, #1
 80031f0:	e7ee      	b.n	80031d0 <__libc_init_array+0xc>
 80031f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f6:	4798      	blx	r3
 80031f8:	3601      	adds	r6, #1
 80031fa:	e7f2      	b.n	80031e2 <__libc_init_array+0x1e>
 80031fc:	08003264 	.word	0x08003264
 8003200:	08003264 	.word	0x08003264
 8003204:	08003264 	.word	0x08003264
 8003208:	08003268 	.word	0x08003268

0800320c <memset>:
 800320c:	4402      	add	r2, r0
 800320e:	4603      	mov	r3, r0
 8003210:	4293      	cmp	r3, r2
 8003212:	d100      	bne.n	8003216 <memset+0xa>
 8003214:	4770      	bx	lr
 8003216:	f803 1b01 	strb.w	r1, [r3], #1
 800321a:	e7f9      	b.n	8003210 <memset+0x4>

0800321c <_init>:
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	bf00      	nop
 8003220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003222:	bc08      	pop	{r3}
 8003224:	469e      	mov	lr, r3
 8003226:	4770      	bx	lr

08003228 <_fini>:
 8003228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322a:	bf00      	nop
 800322c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322e:	bc08      	pop	{r3}
 8003230:	469e      	mov	lr, r3
 8003232:	4770      	bx	lr
